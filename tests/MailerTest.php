<?php

class MailerTest extends \PHPUnit\Framework\TestCase
{
    public \components\Mailer $mailer;
    public $mailerMock;
    public function setUp(): void
    {
        $this->mailer = new \components\Mailer();
        $this->mailerMock = $this->createMock(PHPMailer\PHPMailer\PHPMailer::class);

        $reflection = new ReflectionClass($this->mailer);
        $reflection_property = $reflection->getProperty("mailer");
        $reflection_property->setAccessible(true);

        $reflection_property->setValue($this->mailer, $this->mailerMock);
    }

    public function testSetReceiverCorrect()
    {
        $correctEmail = "example@example.com";

        $this->mailerMock->expects($this->once())
            ->method("addAddress")
            ->with($correctEmail);
        $this->mailer->setReceiver($correctEmail);
    }

    public function testSetReceiverIncorrect()
    {
        try {
            $correctEmail = "exampample.com";

            $this->mailerMock->expects($this->never())
                ->method("addAddress")
                ->with($correctEmail);
            $this->mailer->setReceiver($correctEmail);
        }catch (Exception $exception) {

        }
    }

    public function testSetSubject()
    {
        $subject = "Subject";
        $this->mailer->setSubject($subject);

        self::assertEquals($subject, $this->mailer->getSubject());
    }

    public function testSetMessage()
    {
        $message = "Message";
        $this->mailer->setMessage($message);

        self::assertEquals($message, $this->mailer->getMessage());
    }

    public function testSetMultipleAddresses()
    {
        $correctEmails = ["example@dfgdfgdfg.com", "exampleee@dfgdfgdfg.com"];

        $this->mailerMock->expects($this->once())
            ->method("addAddress");
        $this->mailerMock->expects($this->any())
            ->method("addBCC");
        $this->mailer->setMultipleReceivers($correctEmails);
    }

    public function testSetMultipleAddressesEmpty()
    {
        $emails = [];

        $this->mailerMock->expects($this->never())
            ->method("addAddress");
        $this->mailerMock->expects($this->never())
            ->method("addBCC");
        $this->mailer->setMultipleReceivers($emails);
    }

    public function testSendMail()
    {
        $this->mailerMock->expects($this->once())
            ->method("send")
            ->willReturn(true);
        $this->mailer->sendMail();
    }

    public function testRender()
    {
        $view = "../../tests/_data/test_view";
        $mailer = new \components\Mailer();
        $renderedResult = $mailer->render($view, ["test" => "test"]);

        self::assertEquals("<h1>A test view</h1>", $renderedResult);
    }

    public function testReset()
    {
        $this->mailer->reset();
        self::assertEmpty($this->mailer->getReceivers());
        self::assertEmpty($this->mailer->getSubject());
        self::assertEmpty($this->mailer->getMessage());
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}