<?php

class OlxDomParserTest extends \PHPUnit\Framework\TestCase
{
    public \components\OlxDomParser $olxDomParser;
    public $goodsModelMock;
    public $curlWrapperMock;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->olxDomParser = new \components\OlxDomParser();
        $this->olxDomParser->page = file_get_contents(__DIR__ . "/_data/olx_test_page");

        $this->goodsModelMock = $this->createMock(\models\GoodsItem::class);
        $this->curlWrapperMock = $this->createMock(\components\CurlWrapper::class);
    }

    public function testDownloadPage()
    {
        $testUrl = "https://www.olx.ua/d/uk/obyavlenie/krilo-kapot-fara-ksenon-bamper-skoda-octavia-a5-IDU7Xl1.html?reason=hp%7Cpromoted";
        $testResponse = file_get_contents(__DIR__ . "/_data/olx_test_page");
        $this->olxDomParser->curlWrapper = $this->curlWrapperMock;
        $this->curlWrapperMock->expects($this->once())
            ->method("getPage")
            ->with($testUrl)
            ->willReturn($testResponse);
        $this->olxDomParser->downloadPage($testUrl);

        self::assertEquals($testResponse, $this->olxDomParser->page);
    }

    public function testGetPrice()
    {
        $expectedOutput = "250 грн.";
        $producedOutput = $this->olxDomParser->getPrice();

        self::assertEquals($expectedOutput, $producedOutput);
    }

    public function testGetName()
    {
        $expectedOutput = "Крило капот фара ксенон бампер skoda Octavia A5";
        $producedOutput = $this->olxDomParser->getName();

        self::assertEquals($expectedOutput, $producedOutput);
    }

    public function testPopulateGoodsItem()
    {
//        $this->olxDomParser->goodsItem = $this->goodsModelMock;
        $this->olxDomParser->curlWrapper = $this->curlWrapperMock;
        $testUrl = "https://www.olx.ua/d/uk/obyavlenie/krilo-kapot-fara-ksenon-bamper-skoda-octavia-a5-IDU7Xl1.html?reason=hp%7Cpromoted";
        $this->goodsModelMock->id = $testUrl;
        $testResponse = file_get_contents(__DIR__ . "/_data/olx_test_page");
        $this->curlWrapperMock->expects($this->once())
            ->method("getPage")
            ->with($testUrl)
            ->willReturn($testResponse);

        $this->olxDomParser->populateGoodsItem($this->goodsModelMock);
        self::assertEquals("Крило капот фара ксенон бампер skoda Octavia A5", $this->goodsModelMock->name);
        self::assertEquals("250 грн.", $this->goodsModelMock->price);
    }

    public function testPopulateBlankGoods()
    {
        $this->goodsModelMock->id = "";
        $this->goodsModelMock->name = "";
        $this->goodsModelMock->price = "";
        $testResponse = file_get_contents(__DIR__ . "/_data/olx_test_page");

        $this->olxDomParser->curlWrapper = $this->curlWrapperMock;

        $this->curlWrapperMock->expects($this->never())
            ->method("getPage")
            ->willReturn($testResponse);
        $this->olxDomParser->populateGoodsItem($this->goodsModelMock);

        self::assertEmpty($this->goodsModelMock->id);
        self::assertEmpty($this->goodsModelMock->name);
        self::assertEmpty($this->goodsModelMock->price);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

    }
}